//O(n) and O(logn*logn) solution

//O(n) solution 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int func(TreeNode *root)
    {
        if(root==NULL) return 0;
        return func(root->left) + func(root->right) + 1;
        
    }
    int countNodes(TreeNode* root) {
        return func(root);
        
    }
};

//O(logn*logn) solution

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int func(TreeNode *root)
    {
        if(root==NULL) return 0;
        TreeNode *left = root, *right = root;
        int lh = 0,rh = 0;
        while(left)
        {
            lh++;
            left = left->left;
        }
        while(right)
        {
            rh++;
            right = right->right;
        }
        if(lh==rh) return pow(2,lh)-1;
        return func(root->left) + func(root->right) + 1;
        
    }
    int countNodes(TreeNode* root) {
        return func(root);
        
    }
};
